# Test code for the Meraki Organization module
# Copyright: (c) 2018, Kevin Breit (@kbreit)

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- block:
  # - name: Test an API key is provided
  #   fail:
  #     msg: Please define an API key
  #   when: auth_key is not defined
    
  # - name: Use an invalid domain
  #   meraki_organization:
  #     auth_key: '{{ auth_key }}'
  #     host: marrrraki.com
  #     state: present
  #     org_name: IntTestOrg
  #     output_level: debug
  #   delegate_to: localhost
  #   register: invalid_domain
  #   ignore_errors: yes
    
  # - name: Disable HTTP
  #   meraki_organization:
  #     auth_key: '{{ auth_key }}'
  #     use_https: false
  #     state: query
  #     output_level: debug
  #   delegate_to: localhost
  #   register: http
  #   ignore_errors: yes

  # - name: Connection assertions
  #   assert:
  #     that:
  #       - '"Failed to connect to" in invalid_domain.msg'
  #       - '"http" in http.url'

  - name: Create network
    meraki_network:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      type: appliance
    delegate_to: localhost

  - name: Query firewall rules
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: query
    delegate_to: localhost
    register: query

  - debug:
      var: query

  - assert:
      that:
        - query.data is defined

  - name: Query firewall application categories
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: query
      categories: yes
    delegate_to: localhost
    register: query_categories

  - debug:
      var: query_categories

  - assert:
      that:
        - query_categories.data is defined

  - name: Create firewall rule for IP range in check mode
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: ip_range
          ip_range: 10.11.12.0/24 
    delegate_to: localhost
    register: create_ip_range_check
    check_mode: yes

  - debug:
      var: create_ip_range_check

  - assert:
      that:
        - create_ip_range_check is not changed

  - name: Create firewall rule for IP range
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: ip_range
          ip_range: 10.11.12.0/24 
    delegate_to: localhost
    register: create_ip_range

  - debug:
      var: create_ip_range

  - assert:
      that:
        - create_ip_range is changed
        - create_ip_range.data.rules | length == 1

  - name: Create firewall rule for IP range with idempotency with check mode
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: ip_range
          ip_range: 10.11.12.0/24
    delegate_to: localhost
    register: create_ip_range_idempotent_check
    check_mode: yes


  - assert:
      that:
        - create_ip_range_idempotent_check is not changed

  - name: Create firewall rule for IP range with idempotency
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: ip_range
          ip_range: 10.11.12.0/24
    delegate_to: localhost
    register: create_ip_range_idempotent

  - assert:
      that:
        - create_ip_range_idempotent is not changed

  - name: Create firewall rule for application
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: application
          application:
            name: facebOOk
    delegate_to: localhost
    register: application_rule

  - assert:
      that:
        - application_rule is changed
        - application_rule.data.rules is defined

  - name: Create firewall rule for application via ID
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: application
          application:
            id: meraki:layer7/application/205
    delegate_to: localhost
    register: application_rule_id

  - assert:
      that:
        - application_rule_id is changed

  - name: Create firewall rule for invalid application
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: application
          application:
            name: ansible
    delegate_to: localhost
    register: application_rule_invalid
    ignore_errors: yes

  - name: Create firewall rule for application category
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: application_category
          application:
            id: meraki:layer7/category/24
    delegate_to: localhost
    register: application_category_rule

  - assert:
      that:
        - application_category_rule is changed

  - name: Create firewall rule for application category with ID
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: application_category
          application:
            id: meraki:layer7/application/205
    delegate_to: localhost
    register: application_category_rule_id

  - assert:
      that:
        - application_category_rule_id is changed

  - name: Create firewall rule for host
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: host
          host: asdf.com
    delegate_to: localhost
    register: host_rule

  - assert:
      that:
        - host_rule is changed

  - name: Create firewall rule for port
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: port
          port: 1234
    delegate_to: localhost
    register: port_rule

  - assert:
      that:
        - port_rule is changed

  - name: Create firewall rule for blacklisted countries
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: blacklisted_countries
          countries:
            - CA
            - AX
    delegate_to: localhost
    register: blacklist_countries

  - assert:
      that:
        - blacklist_countries is changed

  - name: Create firewall rule for whitelisted countries
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: whitelisted_countries
          countries:
            - US
            - FR
    delegate_to: localhost
    register: whitelist_countries

  - assert:
      that:
        - whitelist_countries is changed

  - name: Create multiple firewall rules
    meraki_mx_l7_firewall:
      auth_key: '{{ auth_key }}'
      org_name: '{{test_org_name}}'
      net_name: TestNetAppliance
      state: present
      rules:
        - type: whitelisted_countries
          countries:
            - US
            - FR
        - type: blacklisted_countries
          countries:
            - CN
        - policy: deny
          type: port
          port: 8080
    delegate_to: localhost
    register: multiple_rules

  - debug:
      var: multiple_rules

  - assert:
      that:
        - multiple_rules.data.rules | length == 3
        - multiple_rules is changed

